import streamlit as st
import pandas as pd
import io
import zipfile
from openpyxl import Workbook
from openpyxl.styles import PatternFill, Font, Alignment, Border, Side
from openpyxl.utils.dataframe import dataframe_to_rows

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ü–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä",
    page_icon="üè°",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π
col1, col2 = st.columns([1, 10])
with col1:
    st.image("my_icon.png", width=50)
with col2:
    st.markdown("## –ü–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º")

st.markdown("""
–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Å –∫–≤–∞—Ä—Ç–∏—Ä–∞–º–∏, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Å—É–º–º—É –ø—Ä–∏–±–∞–≤–∫–∏.  
–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞—Å—Ç –∞—Ä—Ö–∏–≤ —Å –ø–µ—Ä–µ–æ—Ü–µ–Ω—ë–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏.
""")

uploaded_file = st.file_uploader("üì• –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª", type=["xlsx"])

if uploaded_file:
    try:
        df = pd.read_excel(uploaded_file)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
    else:
        required_cols = {"–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞", "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ", "–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã", "–≠—Ç–∞–∂",
                         "–ü–ª–æ—â–∞–¥—å –æ–±—â–∞—è", "–û–±—â–∞—è", "–¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã", "–°—Ç–∞—Ç—É—Å", "–í–∏–¥ –ø–æ–º–µ—â–µ–Ω–∏—è", "–°—Ç–æ–∏–º–æ—Å—Ç—å"}
        if not required_cols.issubset(df.columns):
            st.error(f"–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: {', '.join(required_cols)}")
        else:
            # –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º –∫–æ–ª–æ–Ω–∫—É "–°—Ç–æ–∏–º–æ—Å—Ç—å"
            df = df.rename(columns={"–°—Ç–æ–∏–º–æ—Å—Ç—å": "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ –ø—Ä–µ–¥.–ø—Ä–∏–∫–∞–∑—É"})

            # --- –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å "–í—ã–±—Ä–∞—Ç—å –≤—Å—ë" ---
            def multiselect_all(label, options):
                opts = options.tolist()
                opts.insert(0, "–í—Å–µ")
                selected = st.multiselect(label, opts)
                if "–í—Å–µ" in selected or not selected:
                    return options
                return selected

            # –§–∏–ª—å—Ç—Ä—ã
            readiness_choices = multiselect_all("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞:", df["–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞"].unique())
            df_filtered = df[df["–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞"].isin(readiness_choices)]

            dept_choices = multiselect_all("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏:", df_filtered["–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"].unique())
            df_filtered = df_filtered[df_filtered["–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"].isin(dept_choices)]

            status_choices = multiselect_all("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:", df_filtered["–°—Ç–∞—Ç—É—Å"].unique())
            df_filtered = df_filtered[df_filtered["–°—Ç–∞—Ç—É—Å"].isin(status_choices)]

            vid_choices = multiselect_all("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –ø–æ–º–µ—â–µ–Ω–∏—è:", df_filtered["–í–∏–¥ –ø–æ–º–µ—â–µ–Ω–∏—è"].unique())
            df_filtered = df_filtered[df_filtered["–í–∏–¥ –ø–æ–º–µ—â–µ–Ω–∏—è"].isin(vid_choices)]

            flat_type_choices = multiselect_all("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã:", df_filtered["–¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã"].unique())
            df_filtered = df_filtered[df_filtered["–¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã"].isin(flat_type_choices)]

            # –°—É–º–º–∞ –ø—Ä–∏–±–∞–≤–∫–∏
            add_val = st.number_input("–°–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (‚ÇΩ):", step=10000, min_value=0)

            # –î–∞—Ç–∞ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            report_date = st.date_input("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞")

            # --- –†–∞—Å—á—ë—Ç –ø–ª–æ—â–∞–¥–∏ ---
            df_filtered["–ü–ª–æ—â–∞–¥—å –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞"] = df_filtered.apply(
                lambda row: row["–û–±—â–∞—è"] if row["–°—Ç–∞—Ç—É—Å"] == "–°–¥–∞–Ω" else row["–ü–ª–æ—â–∞–¥—å –æ–±—â–∞—è"],
                axis=1
            )

            # --- –ü—Ä–µ–≤—å—é —Ç–∞–±–ª–∏—Ü—ã ---
            if not df_filtered.empty:
                preview_df = df_filtered.copy()
                preview_df["–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"] = preview_df["–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ –ø—Ä–µ–¥.–ø—Ä–∏–∫–∞–∑—É"] + add_val
                preview_df["–ù–æ–≤–∞—è —Ü–µ–Ω–∞ –∫–≤.–º"] = preview_df["–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"] / preview_df["–ü–ª–æ—â–∞–¥—å –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞"]
                preview_df["–ò–∑–º–µ–Ω–µ–Ω–∏–µ"] = preview_df["–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"] - preview_df["–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ –ø—Ä–µ–¥.–ø—Ä–∏–∫–∞–∑—É"]

                preview_df_output = preview_df[[
                    "–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã", "–≠—Ç–∞–∂", "–ü–ª–æ—â–∞–¥—å –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞", "–¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã",
                    "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ –ø—Ä–µ–¥.–ø—Ä–∏–∫–∞–∑—É", "–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å",
                    "–ù–æ–≤–∞—è —Ü–µ–Ω–∞ –∫–≤.–º", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ"
                ]]

                preview_df_output = preview_df_output.rename(columns={"–ü–ª–æ—â–∞–¥—å –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞": "–ü–ª–æ—â–∞–¥—å –æ–±—â–∞—è"})

                totals = {
                    "–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã": "–ò–¢–û–ì–û:",
                    "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ –ø—Ä–µ–¥.–ø—Ä–∏–∫–∞–∑—É": preview_df_output["–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ –ø—Ä–µ–¥.–ø—Ä–∏–∫–∞–∑—É"].sum(),
                    "–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å": preview_df_output["–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"].sum(),
                    "–ò–∑–º–µ–Ω–µ–Ω–∏–µ": preview_df_output["–ò–∑–º–µ–Ω–µ–Ω–∏–µ"].sum()
                }
                totals_df = pd.DataFrame([totals])
                preview_with_total = pd.concat([preview_df_output, totals_df], ignore_index=True)

                st.subheader("–ü—Ä–µ–≤—å—é —Ç–∞–±–ª–∏—Ü—ã —Å –Ω–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é")
                st.dataframe(preview_with_total)

            # --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ZIP —Å Excel ---
            if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ—Å—á—ë—Ç"):
                if df_filtered.empty:
                    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º!")
                else:
                    buffer = io.BytesIO()
                    with zipfile.ZipFile(buffer, "w") as zf:
                        date_str = report_date.strftime("%d.%m.%Y")
                        for dept in df_filtered["–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"].unique():
                            df_dept = df_filtered[df_filtered["–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"] == dept].copy()
                            df_dept["–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"] = df_dept["–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ –ø—Ä–µ–¥.–ø—Ä–∏–∫–∞–∑—É"] + add_val
                            df_dept["–ù–æ–≤–∞—è —Ü–µ–Ω–∞ –∫–≤.–º"] = df_dept["–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"] / df_dept["–ü–ª–æ—â–∞–¥—å –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞"]
                            df_dept["–ò–∑–º–µ–Ω–µ–Ω–∏–µ"] = df_dept["–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"] - df_dept["–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ –ø—Ä–µ–¥.–ø—Ä–∏–∫–∞–∑—É"]

                            df_dept_output = df_dept[[
                                "–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã", "–≠—Ç–∞–∂", "–ü–ª–æ—â–∞–¥—å –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞", "–¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã",
                                "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ –ø—Ä–µ–¥.–ø—Ä–∏–∫–∞–∑—É", "–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å",
                                "–ù–æ–≤–∞—è —Ü–µ–Ω–∞ –∫–≤.–º", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ"
                            ]].rename(columns={"–ü–ª–æ—â–∞–¥—å –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞": "–ü–ª–æ—â–∞–¥—å –æ–±—â–∞—è"})

                            totals = {
                                "–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã": "–ò–¢–û–ì–û:",
                                "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ –ø—Ä–µ–¥.–ø—Ä–∏–∫–∞–∑—É": df_dept_output["–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ –ø—Ä–µ–¥.–ø—Ä–∏–∫–∞–∑—É"].sum(),
                                "–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å": df_dept_output["–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"].sum(),
                                "–ò–∑–º–µ–Ω–µ–Ω–∏–µ": df_dept_output["–ò–∑–º–µ–Ω–µ–Ω–∏–µ"].sum()
                            }
                            totals_df = pd.DataFrame([totals])
                            df_dept_output = pd.concat([df_dept_output, totals_df], ignore_index=True)

                            # --- –°–æ–∑–¥–∞–Ω–∏–µ Excel ---
                            wb = Workbook()
                            ws = wb.active
                            for r in dataframe_to_rows(df_dept_output, index=False, header=True):
                                ws.append(r)

                            # –°—Ç–∏–ª–∏
                            thin = Side(border_style="thin", color="FFFFFF")
                            border = Border(left=thin, right=thin, top=thin, bottom=thin)
                            header_fill = PatternFill("solid", fgColor="F79646")
                            zebra_fill = PatternFill("solid", fgColor="D9D9D9")
                            header_font = Font(name="Calibri Light", size=9, bold=True)
                            cell_font = Font(name="Calibri Light", size=9, bold=False)
                            align_center = Alignment(horizontal="center", vertical="center")

                            max_row = ws.max_row
                            max_col = ws.max_column

                            for cell in ws[1]:
                                cell.fill = header_fill
                                cell.font = header_font
                                cell.alignment = align_center
                                cell.border = border

                            for row_idx, row in enumerate(ws.iter_rows(min_row=2, max_row=max_row-1, min_col=1, max_col=max_col), start=1):
                                for cell in row:
                                    cell.font = cell_font
                                    cell.border = border
                                    cell.alignment = align_center
                                    if row_idx % 2 == 0:
                                        cell.fill = zebra_fill
                                    if cell.column == 3:
                                        cell.number_format = '#,##0.00'
                                    elif isinstance(cell.value, (int, float)):
                                        cell.number_format = '#,##0'

                            for cell in ws[max_row]:
                                cell.fill = header_fill
                                cell.font = header_font
                                cell.alignment = align_center
                                cell.border = border
                                if cell.column == 3:
                                    cell.number_format = '#,##0.00'
                                elif isinstance(cell.value, (int, float)):
                                    cell.number_format = '#,##0'

                            for col in ws.columns:
                                max_length = 0
                                col_letter = col[0].column_letter
                                for cell in col:
                                    try:
                                        if cell.value:
                                            max_length = max(max_length, len(str(cell.value)))
                                    except:
                                        pass
                                ws.column_dimensions[col_letter].width = max_length + 2

                            final_buffer = io.BytesIO()
                            wb.save(final_buffer)
                            final_buffer.seek(0)
                            zf.writestr(f"{dept}_{date_str}.xlsx", final_buffer.getvalue())

                    buffer.seek(0)
                    st.success("–§–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã! –°–∫–∞—á–∞–π—Ç–µ –∞—Ä—Ö–∏–≤ –Ω–∏–∂–µ.")
                    st.download_button(
                        label="üì• –°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤",
                        data=buffer,
                        file_name="recalculated_departments.zip",
                        mime="application/zip"
                    )