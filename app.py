import streamlit as st
import pandas as pd
import io
import zipfile
from openpyxl import load_workbook
from openpyxl.styles import Border, Side, PatternFill, Alignment, Font

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ü–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä",
    page_icon="my_icon.png",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
col1, col2 = st.columns([1, 10])
with col1:
    st.image("my_icon.png", width=50)
with col2:
    st.markdown("## –ü–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º")

st.markdown("""
–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Å –∫–≤–∞—Ä—Ç–∏—Ä–∞–º–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞, –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è, —Å—Ç–∞—Ç—É—Å, –≤–∏–¥ –ø–æ–º–µ—â–µ–Ω–∏—è –∏ —Å—É–º–º—É –ø—Ä–∏–±–∞–≤–∫–∏.  
–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞—Å—Ç –∞—Ä—Ö–∏–≤ —Å –ø–µ—Ä–µ–æ—Ü–µ–Ω—ë–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏.
""")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader("üì• –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª", type=["xlsx"])

if uploaded_file:
    try:
        df = pd.read_excel(uploaded_file)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
    else:
        required_cols = {"–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞", "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ", "–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã", "–≠—Ç–∞–∂",
                         "–ü–ª–æ—â–∞–¥—å –æ–±—â–∞—è", "–¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã", "–°—Ç–æ–∏–º–æ—Å—Ç—å"}
        if not required_cols.issubset(df.columns):
            st.error(f"–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: {', '.join(required_cols)}")
        else:
            # –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            readiness_options = df["–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞"].unique()
            readiness_choices = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞:", readiness_options)
            df_filtered = df[df["–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞"].isin(readiness_choices)]

            # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é
            department_options = df_filtered["–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"].unique()
            chosen_departments = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏:", department_options)

            # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
            if "–°—Ç–∞—Ç—É—Å" in df_filtered.columns:
                status_options = df_filtered["–°—Ç–∞—Ç—É—Å"].unique()
                chosen_status = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:", status_options)
                if chosen_status:
                    df_filtered = df_filtered[df_filtered["–°—Ç–∞—Ç—É—Å"].isin(chosen_status)]
            else:
                st.warning("–ö–æ–ª–æ–Ω–∫–∞ '–°—Ç–∞—Ç—É—Å' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ")

            # –§–∏–ª—å—Ç—Ä –ø–æ –≤–∏–¥—É –ø–æ–º–µ—â–µ–Ω–∏—è
            if "–í–∏–¥ –ø–æ–º–µ—â–µ–Ω–∏—è" in df_filtered.columns:
                type_options = df_filtered["–í–∏–¥ –ø–æ–º–µ—â–µ–Ω–∏—è"].unique()
                chosen_types = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –ø–æ–º–µ—â–µ–Ω–∏—è:", type_options)
                if chosen_types:
                    df_filtered = df_filtered[df_filtered["–í–∏–¥ –ø–æ–º–µ—â–µ–Ω–∏—è"].isin(chosen_types)]
            else:
                st.warning("–ö–æ–ª–æ–Ω–∫–∞ '–í–∏–¥ –ø–æ–º–µ—â–µ–Ω–∏—è' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ")

            # –í–≤–æ–¥ —Å—É–º–º—ã –ø—Ä–∏–±–∞–≤–∫–∏
            add_val = st.number_input("–°–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (‚ÇΩ):", step=10000, min_value=0)

            # –í–≤–æ–¥ –¥–∞—Ç—ã –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            report_date = st.date_input("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞")

            # –ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö
            if readiness_choices and chosen_departments:
                preview_df = df_filtered[df_filtered["–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"].isin(chosen_departments)].copy()
                preview_df["–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"] = preview_df["–°—Ç–æ–∏–º–æ—Å—Ç—å"] + add_val
                preview_df["–ù–æ–≤–∞—è —Ü–µ–Ω–∞ –∫–≤.–º"] = preview_df["–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"] / preview_df["–ü–ª–æ—â–∞–¥—å –æ–±—â–∞—è"]
                preview_df["–ò–∑–º–µ–Ω–µ–Ω–∏–µ"] = preview_df["–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"] - preview_df["–°—Ç–æ–∏–º–æ—Å—Ç—å"]

                # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
                total_row = {
                    "–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã": "–ò—Ç–æ–≥–æ",
                    "–≠—Ç–∞–∂": "",
                    "–ü–ª–æ—â–∞–¥—å –æ–±—â–∞—è": "",
                    "–¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã": "",
                    "–°—Ç–æ–∏–º–æ—Å—Ç—å": preview_df["–°—Ç–æ–∏–º–æ—Å—Ç—å"].sum(),
                    "–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å": preview_df["–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"].sum(),
                    "–ù–æ–≤–∞—è —Ü–µ–Ω–∞ –∫–≤.–º": "",
                    "–ò–∑–º–µ–Ω–µ–Ω–∏–µ": preview_df["–ò–∑–º–µ–Ω–µ–Ω–∏–µ"].sum()
                }
                preview_df = pd.concat([preview_df, pd.DataFrame([total_row])], ignore_index=True)

                preview_df = preview_df[["–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã", "–≠—Ç–∞–∂", "–ü–ª–æ—â–∞–¥—å –æ–±—â–∞—è",
                                         "–¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã", "–°—Ç–æ–∏–º–æ—Å—Ç—å", "–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å",
                                         "–ù–æ–≤–∞—è —Ü–µ–Ω–∞ –∫–≤.–º", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ"]]
                st.subheader("–ü—Ä–µ–≤—å—é —Ç–∞–±–ª–∏—Ü—ã —Å –Ω–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é")
                st.dataframe(preview_df)

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ZIP
            if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ—Å—á—ë—Ç"):
                if not readiness_choices:
                    st.warning("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞!")
                elif not chosen_departments:
                    st.warning("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ!")
                else:
                    buffer = io.BytesIO()
                    with zipfile.ZipFile(buffer, "w") as zf:
                        date_str = report_date.strftime("%d.%m.%Y")

                        for dept in chosen_departments:
                            df_dept = df_filtered[df_filtered["–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"] == dept].copy()
                            df_dept["–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"] = df_dept["–°—Ç–æ–∏–º–æ—Å—Ç—å"] + add_val
                            df_dept["–ù–æ–≤–∞—è —Ü–µ–Ω–∞ –∫–≤.–º"] = df_dept["–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"] / df_dept["–ü–ª–æ—â–∞–¥—å –æ–±—â–∞—è"]
                            df_dept["–ò–∑–º–µ–Ω–µ–Ω–∏–µ"] = df_dept["–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"] - df_dept["–°—Ç–æ–∏–º–æ—Å—Ç—å"]

                            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
                            total_row_dept = {
                                "–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã": "–ò—Ç–æ–≥–æ",
                                "–≠—Ç–∞–∂": "",
                                "–ü–ª–æ—â–∞–¥—å –æ–±—â–∞—è": "",
                                "–¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã": "",
                                "–°—Ç–æ–∏–º–æ—Å—Ç—å": df_dept["–°—Ç–æ–∏–º–æ—Å—Ç—å"].sum(),
                                "–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å": df_dept["–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"].sum(),
                                "–ù–æ–≤–∞—è —Ü–µ–Ω–∞ –∫–≤.–º": "",
                                "–ò–∑–º–µ–Ω–µ–Ω–∏–µ": df_dept["–ò–∑–º–µ–Ω–µ–Ω–∏–µ"].sum()
                            }
                            df_dept = pd.concat([df_dept, pd.DataFrame([total_row_dept])], ignore_index=True)

                            df_dept = df_dept[["–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã", "–≠—Ç–∞–∂", "–ü–ª–æ—â–∞–¥—å –æ–±—â–∞—è",
                                               "–¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã", "–°—Ç–æ–∏–º–æ—Å—Ç—å", "–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å",
                                               "–ù–æ–≤–∞—è —Ü–µ–Ω–∞ –∫–≤.–º", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ"]]

                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
                            out_file = io.BytesIO()
                            df_dept.to_excel(out_file, index=False, engine="openpyxl")
                            out_file.seek(0)
                            wb = load_workbook(out_file)
                            ws = wb.active

                            # --- –°—Ç–∏–ª–∏ ---
                            thin = Side(border_style="thin", color="000000")
                            border = Border(left=thin, right=thin, top=thin, bottom=thin)
                            header_fill = PatternFill("solid", fgColor="F79646")   # –æ—Ä–∞–Ω–∂–µ–≤—ã–π
                            zebra_fill = PatternFill("solid", fgColor="D9D9D9")    # —Å–µ—Ä—ã–π
                            header_font = Font(name="Calibri Light", size=9, bold=True)
                            cell_font = Font(name="Calibri Light", size=9, bold=False)
                            align_center = Alignment(horizontal="center", vertical="center")

                            max_row = ws.max_row
                            max_col = ws.max_column

                            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                            for cell in ws[1]:
                                cell.fill = header_fill
                                cell.font = header_font
                                cell.alignment = align_center
                                cell.border = border

                            # –¢–µ–ª–æ —Ç–∞–±–ª–∏—Ü—ã —Å –∑–µ–±—Ä–æ–π
                            for row_idx, row in enumerate(ws.iter_rows(min_row=2, max_row=max_row-1, min_col=1, max_col=max_col), start=1):
                                for cell in row:
                                    cell.font = cell_font
                                    cell.border = border
                                    cell.alignment = align_center
                                    if row_idx % 2 == 0:  # –∑–µ–±—Ä–∞
                                        cell.fill = zebra_fill
                                    if isinstance(cell.value, (int, float)):
                                        cell.number_format = '#,##0'

                            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
                            for cell in ws[max_row]:
                                cell.fill = header_fill
                                cell.font = header_font
                                cell.alignment = align_center
                                cell.border = border
                                if isinstance(cell.value, (int, float)):
                                    cell.number_format = '#,##0'

                            # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞
                            for col in ws.columns:
                                max_length = 0
                                col_letter = col[0].column_letter
                                for cell in col:
                                    try:
                                        if cell.value:
                                            max_length = max(max_length, len(str(cell.value)))
                                    except:
                                        pass
                                ws.column_dimensions[col_letter].width = max_length + 2

                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ ZIP —Å –¥–∞—Ç–æ–π
                            final_buffer = io.BytesIO()
                            wb.save(final_buffer)
                            final_buffer.seek(0)
                            zf.writestr(f"{dept}_{date_str}.xlsx", final_buffer.getvalue())

                    buffer.seek(0)
                    st.success("–§–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã! –°–∫–∞—á–∞–π—Ç–µ –∞—Ä—Ö–∏–≤ –Ω–∏–∂–µ.")
                    st.download_button(
                        label="üì• –°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤",
                        data=buffer,
                        file_name="recalculated_departments.zip",
                        mime="application/zip"
                    )