import streamlit as st
import pandas as pd
import io
import zipfile
from openpyxl import Workbook
from openpyxl.styles import PatternFill, Font, Alignment, Border, Side
from openpyxl.utils.dataframe import dataframe_to_rows

from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, PageBreak
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.units import cm

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–º–Ω–æ–≥–æ PDF ---
def excel_to_pdf_smart(df, title):
    buffer = io.BytesIO()
    pdf = SimpleDocTemplate(buffer, pagesize=A4,
                            topMargin=2*cm, bottomMargin=2*cm,
                            leftMargin=2*cm, rightMargin=2*cm)
    elements = []

    data = [df.columns.tolist()] + df.values.tolist()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–∞ –∏ –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–æ–∫–∏
    font_size = 8
    row_height = font_size * 1.8  # –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏ —Å padding

    # –î–æ—Å—Ç—É–ø–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    available_height = A4[1] - 4*cm  # –≤–µ—Ä—Ö–Ω–∏–µ –∏ –Ω–∏–∂–Ω–∏–µ –ø–æ–ª—è

    max_rows_per_page = int(available_height // row_height)
    if max_rows_per_page < 1:
        max_rows_per_page = 20

    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    n_cols = len(df.columns)
    page_width = A4[0] - 4*cm
    col_width = page_width / n_cols
    col_widths = [col_width] * n_cols

    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for i in range(0, len(data)-1, max_rows_per_page):
        chunk = [data[0]] + data[i+1:i+1+max_rows_per_page]
        table = Table(chunk, repeatRows=1, colWidths=col_widths)
        style = TableStyle([
            ('BACKGROUND', (0,0), (-1,0), colors.HexColor('#F79646')),
            ('TEXTCOLOR', (0,0), (-1,0), colors.whitesmoke),
            ('ALIGN', (0,0), (-1,-1), 'CENTER'),
            ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
            ('FONTSIZE', (0,0), (-1,-1), font_size),
            ('BOTTOMPADDING', (0,0), (-1,0), 6),
            ('GRID', (0,0), (-1,-1), 0.25, colors.black),
        ])
        table.setStyle(style)
        elements.append(table)
        elements.append(PageBreak())

    pdf.build(elements)
    buffer.seek(0)
    return buffer

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
    page_title="–ü–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä",
    page_icon="üè°",
    layout="wide"
)

col1, col2 = st.columns([1, 10])
with col1:
    st.image("my_icon.png", width=50)
with col2:
    st.markdown("## –ü–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º")

st.markdown("""
–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Å –∫–≤–∞—Ä—Ç–∏—Ä–∞–º–∏, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Å—É–º–º—É –ø—Ä–∏–±–∞–≤–∫–∏.  
–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞—Å—Ç –∞—Ä—Ö–∏–≤ —Å –ø–µ—Ä–µ–æ—Ü–µ–Ω—ë–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏.
""")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ ---
uploaded_file = st.file_uploader("üì• –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª", type=["xlsx"])

if uploaded_file:
    try:
        df = pd.read_excel(uploaded_file)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
    else:
        required_cols = {"–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞", "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ", "–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã", "–≠—Ç–∞–∂",
                         "–ü–ª–æ—â–∞–¥—å –æ–±—â–∞—è", "–¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã", "–°—Ç–∞—Ç—É—Å", "–í–∏–¥ –ø–æ–º–µ—â–µ–Ω–∏—è", "–°—Ç–æ–∏–º–æ—Å—Ç—å"}
        if not required_cols.issubset(df.columns):
            st.error(f"–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: {', '.join(required_cols)}")
        else:
            # --- –§–∏–ª—å—Ç—Ä—ã ---
            readiness_options = df["–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞"].unique()
            readiness_choices = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞:", readiness_options)
            df_filtered = df[df["–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞"].isin(readiness_choices)] if readiness_choices else df.copy()

            department_options = df_filtered["–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"].unique()
            chosen_departments = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏:", department_options)
            if chosen_departments:
                df_filtered = df_filtered[df_filtered["–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"].isin(chosen_departments)]

            status_options = df_filtered["–°—Ç–∞—Ç—É—Å"].unique()
            chosen_status = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:", status_options)
            if chosen_status:
                df_filtered = df_filtered[df_filtered["–°—Ç–∞—Ç—É—Å"].isin(chosen_status)]

            vid_options = df_filtered["–í–∏–¥ –ø–æ–º–µ—â–µ–Ω–∏—è"].unique()
            chosen_vid = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –ø–æ–º–µ—â–µ–Ω–∏—è:", vid_options)
            if chosen_vid:
                df_filtered = df_filtered[df_filtered["–í–∏–¥ –ø–æ–º–µ—â–µ–Ω–∏—è"].isin(chosen_vid)]

            flat_type_options = df_filtered["–¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã"].unique()
            chosen_flat_types = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã:", flat_type_options)
            if chosen_flat_types:
                df_filtered = df_filtered[df_filtered["–¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã"].isin(chosen_flat_types)]

            add_val = st.number_input("–°–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (‚ÇΩ):", step=10000, min_value=0)
            report_date = st.date_input("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞")

            # --- –ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö ---
            if not df_filtered.empty and chosen_departments:
                preview_df = df_filtered.copy()
                preview_df["–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"] = preview_df["–°—Ç–æ–∏–º–æ—Å—Ç—å"] + add_val
                preview_df["–ù–æ–≤–∞—è —Ü–µ–Ω–∞ –∫–≤.–º"] = preview_df["–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"] / preview_df["–ü–ª–æ—â–∞–¥—å –æ–±—â–∞—è"]
                preview_df["–ò–∑–º–µ–Ω–µ–Ω–∏–µ"] = preview_df["–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"] - preview_df["–°—Ç–æ–∏–º–æ—Å—Ç—å"]

                preview_df = preview_df[[
                    "–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã", "–≠—Ç–∞–∂", "–ü–ª–æ—â–∞–¥—å –æ–±—â–∞—è", "–¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã",
                    "–°—Ç–∞—Ç—É—Å", "–í–∏–¥ –ø–æ–º–µ—â–µ–Ω–∏—è", "–°—Ç–æ–∏–º–æ—Å—Ç—å", "–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å",
                    "–ù–æ–≤–∞—è —Ü–µ–Ω–∞ –∫–≤.–º", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ"
                ]]

                totals = {
                    "–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã": "–ò–¢–û–ì–û:",
                    "–°—Ç–æ–∏–º–æ—Å—Ç—å": preview_df["–°—Ç–æ–∏–º–æ—Å—Ç—å"].sum(),
                    "–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å": preview_df["–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"].sum(),
                    "–ò–∑–º–µ–Ω–µ–Ω–∏–µ": preview_df["–ò–∑–º–µ–Ω–µ–Ω–∏–µ"].sum()
                }
                totals_df = pd.DataFrame([totals])
                preview_with_total = pd.concat([preview_df, totals_df], ignore_index=True)
                st.subheader("–ü—Ä–µ–≤—å—é —Ç–∞–±–ª–∏—Ü—ã —Å –Ω–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é")
                st.dataframe(preview_with_total)

            # --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ZIP ---
            if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ—Å—á—ë—Ç"):
                if df_filtered.empty:
                    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º!")
                else:
                    date_str = report_date.strftime("%d.%m.%Y")
                    excel_buffer = io.BytesIO()
                    pdf_buffer = io.BytesIO()

                    with zipfile.ZipFile(excel_buffer, "w") as zf_excel, zipfile.ZipFile(pdf_buffer, "w") as zf_pdf:
                        for dept in chosen_departments:
                            df_dept = df_filtered[df_filtered["–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"] == dept].copy()
                            df_dept["–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"] = df_dept["–°—Ç–æ–∏–º–æ—Å—Ç—å"] + add_val
                            df_dept["–ù–æ–≤–∞—è —Ü–µ–Ω–∞ –∫–≤.–º"] = df_dept["–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"] / df_dept["–ü–ª–æ—â–∞–¥—å –æ–±—â–∞—è"]
                            df_dept["–ò–∑–º–µ–Ω–µ–Ω–∏–µ"] = df_dept["–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"] - df_dept["–°—Ç–æ–∏–º–æ—Å—Ç—å"]

                            df_dept = df_dept[[
                                "–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã", "–≠—Ç–∞–∂", "–ü–ª–æ—â–∞–¥—å –æ–±—â–∞—è", "–¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã",
                                "–°—Ç–∞—Ç—É—Å", "–í–∏–¥ –ø–æ–º–µ—â–µ–Ω–∏—è", "–°—Ç–æ–∏–º–æ—Å—Ç—å", "–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å",
                                "–ù–æ–≤–∞—è —Ü–µ–Ω–∞ –∫–≤.–º", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ"
                            ]]

                            totals = {
                                "–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã": "–ò–¢–û–ì–û:",
                                "–°—Ç–æ–∏–º–æ—Å—Ç—å": df_dept["–°—Ç–æ–∏–º–æ—Å—Ç—å"].sum(),
                                "–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å": df_dept["–ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"].sum(),
                                "–ò–∑–º–µ–Ω–µ–Ω–∏–µ": df_dept["–ò–∑–º–µ–Ω–µ–Ω–∏–µ"].sum()
                            }
                            totals_df = pd.DataFrame([totals])
                            df_dept = pd.concat([df_dept, totals_df], ignore_index=True)

                            # --- Excel ---
                            wb = Workbook()
                            ws = wb.active
                            for r in dataframe_to_rows(df_dept, index=False, header=True):
                                ws.append(r)

                            thin = Side(border_style="thin", color="000000")
                            border = Border(left=thin, right=thin, top=thin, bottom=thin)
                            header_fill = PatternFill("solid", fgColor="F79646")
                            zebra_fill = PatternFill("solid", fgColor="D9D9D9")
                            header_font = Font(name="Calibri Light", size=9, bold=True)
                            cell_font = Font(name="Calibri Light", size=9)
                            align_center = Alignment(horizontal="center", vertical="center")

                            max_row = ws.max_row
                            max_col = ws.max_column

                            for cell in ws[1]:
                                cell.fill = header_fill
                                cell.font = header_font
                                cell.alignment = align_center
                                cell.border = border

                            for row_idx, row in enumerate(ws.iter_rows(min_row=2, max_row=max_row-1, min_col=1, max_col=max_col), start=1):
                                for cell in row:
                                    cell.font = cell_font
                                    cell.border = border
                                    cell.alignment = align_center
                                    if row_idx % 2 == 0:
                                        cell.fill = zebra_fill
                                    if cell.column == 3:
                                        cell.number_format = '#,##0.00'
                                    elif isinstance(cell.value, (int, float)):
                                        cell.number_format = '#,##0'

                            for cell in ws[max_row]:
                                cell.fill = header_fill
                                cell.font = header_font
                                cell.alignment = align_center
                                cell.border = border
                                if cell.column == 3:
                                    cell.number_format = '#,##0.00'
                                elif isinstance(cell.value, (int, float)):
                                    cell.number_format = '#,##0'

                            for col in ws.columns:
                                max_length = 0
                                col_letter = col[0].column_letter
                                for cell in col:
                                    if cell.value:
                                        max_length = max(max_length, len(str(cell.value)))
                                ws.column_dimensions[col_letter].width = max_length + 2

                            final_buffer = io.BytesIO()
                            wb.save(final_buffer)
                            final_buffer.seek(0)
                            zf_excel.writestr(f"{dept}_{date_str}.xlsx", final_buffer.getvalue())

                            # --- PDF ---
                            pdf_file = excel_to_pdf_smart(df_dept, dept)
                            zf_pdf.writestr(f"{dept}_{date_str}.pdf", pdf_file.getvalue())

                    excel_buffer.seek(0)
                    pdf_buffer.seek(0)

                    st.success("–§–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã! –°–∫–∞—á–∞–π—Ç–µ –∞—Ä—Ö–∏–≤—ã –Ω–∏–∂–µ.")
                    st.download_button(
                        label="üì• –°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤ Excel",
                        data=excel_buffer,
                        file_name="recalculated_departments.zip",
                        mime="application/zip"
                    )
                    st.download_button(
                        label="üì• –°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤ PDF",
                        data=pdf_buffer,
                        file_name="recalculated_departments_pdf.zip",
                        mime="application/zip"
                    )